//------------------------------------------------------------------------------
// Parser class
//------------------------------------------------------------------------------

import { logHeading, toString, inspect } from './re_helpers.js';

import {
  getToken,
  getConcat,
  getBracketClass,
  concatAfter,
} from './re_tokens.js';

import State from './re_states.js';
import { createWarning } from './re_static_info.js';
// import Fragment from './re_fragments.js';

//------------------------------------------------------------------------------

class Parser {
  constructor(input) {
    this.input = input; // unprocessed input string

    // Temporary state properties used during parsing
    this.pos = 0;
    this.prevToken = {};
    this.operators = [];

    // Data structures generated by the parser
    this.rpn = [];
    this.descriptions = [];

    // Data structures generated by the compiler
    this.firstState = null;
    this.fragments = [];
    this.warnings = [];
  }

  //----------------------------------------------------------------------------
  // Helpers

  ch(shift = 0) {
    return this.input[this.pos + shift];
  }

  slice(length) {
    return this.input.slice(this.pos, this.pos + length);
  }

  code(shift = 0) {
    return this.input.charCodeAt(this.pos + shift);
  }

  remaining() {
    return this.input.length - this.pos;
  }

  logStr() {
    logHeading('Input');
    console.log(`  ${this.input}`);
  }

  logWarnings() {
    logHeading('Warnings');
    this.warnings.forEach((warning) => console.log(`  ${toString(warning)}`));
  }

  log() {
    this.logStr();
    this.logTokens();
    this.logDescriptions();
    // this.logGraph();
    this.logWarnings();
  }

  //----------------------------------------------------------------------------
  // Convert to Reverse Polish Notation (RPN)

  // Read the next token and advance the position in the input string
  readToken() {
    // Bracket expressions
    if (this.ch() === '[') {
      return this.readBracketExpression();
    }

    const token = getToken(this.slice(2), this.pos);
    this.pushDescription(token.label, token.type);
    this.pos += token.label.length;
    return token;
  }

  lastOperatorIs(label) {
    const operator = this.operators[this.operators.length - 1];
    return operator !== undefined && operator.label === label;
  }

  // Transfer the stacked operator to the RPN queue if it is at the top
  transferOperator(ch) {
    if (this.lastOperatorIs(ch)) {
      const operator = this.operators.pop();
      this.rpn.push(operator);
    }
  }

  // Add an implicit concat when necessary
  concat() {
    this.transferOperator('~');
    this.operators.push(getConcat());
  }

  // Generate a queue of tokens in reverse polish notation (RPN)
  // using a simplified shunting-yard algorithm
  generateRPN() {
    while (this.remaining()) {
      const token = this.readToken();
      switch (token.type) {
        case 'charLiteral':
        case 'escapedChar':
        case 'charClass':
        case 'bracketClass':
        case '.':
          if (concatAfter(this.prevToken)) this.concat();
          this.rpn.push(token);
          break;
        case '|':
          this.transferOperator('~');
          this.transferOperator('|');
          this.operators.push(token);
          break;
        case '?':
        case '*':
        case '+':
          this.rpn.push(token);
          break;
        case '(':
          if (concatAfter(this.prevToken)) this.concat();
          token.begin = this.pos - 1;
          this.operators.push(token);
          break;
        case ')':
          this.transferOperator('~');
          this.transferOperator('|');
          const begin = this.operators.pop().begin;
          const end = this.pos - 1;
          const info = { begin, end };
          this.describe(begin, info);
          this.describe(end, info);
          break;
        default:
          break;
      }
      this.prevToken = token;
    }
    this.transferOperator('~');
    this.transferOperator('|');
  }

  // Log the token queue
  logTokens() {
    logHeading('Tokens');
    this.rpn.forEach(inspect);
  }

  //----------------------------------------------------------------------------
  // Descriptions

  pushDescription(label, type, config = {}) {
    this.descriptions.push({ label, type, ...config });
  }

  describe(pos, info) {
    const description = this.descriptions[pos];
    for (const key in info) description[key] = info[key];
  }

  logDescriptions() {
    logHeading('Descriptions');
    this.descriptions.forEach(inspect);
  }

  //----------------------------------------------------------------------------
  // Bracket expressions

  eatToken(type) {
    this.pushDescription(this.ch(), type);
    this.pos++;
  }

  tryEatToken(type) {
    if (this.ch() === type) {
      this.pushDescription(type, type);
      this.pos++;
      return true;
    }
    return false;
  }

  readBracketChar(matches) {
    this.pushDescription(this.ch(), 'bracketChar');
    matches.add(this.ch());
    this.pos++;
  }

  tryReadBracketChar(label, matches) {
    if (this.ch() === label) {
      this.pushDescription(label, 'bracketChar');
      matches.add(label);
      this.pos++;
      return true;
    }
    return false;
  }

  tryReadBracketRange(matches) {
    if (this.remaining() < 3 || this.ch(1) !== '-' || this.ch(2) === ']') {
      return false;
    }

    const rangeLow = this.code(0);
    const rangeHigh = this.code(2);
    for (let i = rangeLow; i <= rangeHigh; i++) {
      matches.add(String.fromCharCode(i));
    }

    this.eatToken('bracketRangeLow');
    this.eatToken('-');
    this.eatToken('bracketRangeHigh');

    return true;
  }

  readBracketExpression() {
    const begin = this.pos;
    const set = new Set();

    this.eatToken('[');
    const negate = this.tryEatToken('^');

    // Special characters are treated as literals at the beginning
    this.tryReadBracketChar(']', set) || this.tryReadBracketChar('-', set);

    // Try char range, otherwise read char literal
    while (this.remaining() && this.ch() !== ']') {
      this.tryReadBracketRange(set) || this.readBracketChar(set);
    }

    // Finalize
    const end = this.pos;
    const range = [begin, end];
    const matches = [...set].join('');
    const info = { range, negate, matches };
    this.describe(begin, info);

    // Edge case: missing closing bracket
    if (this.ch() === ']') {
      this.eatToken(']');
      this.describe(end, info);
    } else {
      const warning = createWarning('!]', { pos: begin });
      this.warnings.push(warning);
    }

    const label = this.input.slice(begin, end + 1);
    return getBracketClass(label, info);
  }

  //----------------------------------------------------------------------------
  // Compile NFA

  compileGraph() {
    this.rpn.forEach((token) => {
      token.compile(this.fragments, token);
    });

    this.firstState = new State('>', 'first');
    this.lastState = new State('#', 'last');
    this.firstState.connectTo(this.fragments[0]).connectTo(this.lastState);
  }

  logGraph() {
    logHeading('Graph');
    this.firstState.logAll();
  }
}

//------------------------------------------------------------------------------

export default Parser;

// parser.compileGraph();

const parser = new Parser('a|b*|[c]');
parser.generateRPN();
parser.log();

// const token = parser.rpn[0];
// console.log(toString(token));
